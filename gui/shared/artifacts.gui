# These are GUI types that can be used to create lists of artifacts (or whatever other datamodel you want)
# They are based on using provinces stored in the list "indices" to be used as indices in the list.
# The index is passed as a province scope "prov" to scripted_gui, which then computes effects for the item of the list in the indexed position, accessed by scope:prov.index or scope:prov.var:index.
# Passing dummy scopes like this is the only known way to pass information like flags and nums to scripted_gui.
# Most important blocks to override: "datamodel" (where should the data be taken from?) and "itemcontext" (which scripted_gui should be used when interacting with the list item?)
# artifact_list: Contains two coinciding elements: 
# 1. artifact_visual_gui: By default shows a vertical list of artifacts from the character list artifact_list_filtered with names, icons, stats and equipped status.
# 2. artifact_indices_gui: By default changes the character variable artifact_selection to whatever artifact is clicked.
# artifact_filter_options: By default shows a horizontal list of artifact types with icons and mouseover tooltips.

types ArtifactTypes {
    type artifact_list = container {
        artifact_indices_gui = { # To click on things
            block "index" {}
        }
        artifact_visual_gui = { # To look at things
            block "visual" {}
        }
    }
    type artifact_filter_options = container {
        artifact_filter_options_indices = { # To click on things
            block "index" {}
        }
        artifact_filter_options_visual = { # To look at things
            block "visual" {}
        }
    }
    type artifact_visual_gui = dynamicgridbox { # Create visuals for a list like in the main artifact window
        ignoreinvisible = yes
        maxhorizontalslots = 1
        block "maxverticalslots"{
            maxverticalslots = 100
        }
        layoutpolicy_vertical = expanding
        position = {0 0}
        name = "artifact_all"
        block "datamodel" {
            datamodel = "[Character.MakeScope.GetList('artifact_list')]"
        }
        item = {
            widget = { # This will look and feel like a button but by default it doesn't do anything.
                block "size" {
                    size = { 500 101 }
                }
                # Tooltip shows modifier description, useful for modifiers that affect a lot of different stats.
                tooltip = artifact_tooltip
                block "artifact_entry"
                {}
                block "visibility" {}
                hbox = {
                    background = {
                        texture = "gfx/artifacts/tile_selected_gold.dds"
                        spriteType = Corneredtiled
                        spriteborder = { 6 6 }
                        shaderfile = "gfx/FX/pdxgui_default.shader"
                        block "artifact_entry_border"
                        {}
                    }
        
                    widget = {
                        size = { 101 101 }
                        alwaystransparent = yes
                        # Golden border around the icon
                        background = {
                            texture = "gfx/artifacts/tile_selected_gold.dds"
                            spriteType = Corneredtiled
                            spriteborder = { 6 6 }
                            shaderfile = "gfx/FX/pdxgui_default.shader"
                            block "artifact_entry_border"
                            {}
                        }
                        # This is actually the icon for the artifact
                        # It has to be generated as a Texticon in order to set the icon path outside of the main gui files and reduce barrier to entry for new modders.
                        text_single = {
                            text = "[Concatenate(Concatenate('@icon_',Scope.GetFlagName), '!')]"
                            size = { 101 101 }
                            parentanchor = center
                        }
                        text_single = {
                            text = "#credits_entries x[Character.MakeScope.Var(Scope.GetFlagName).GetValue|0]#!  "
                            size = { 101 101 }
                            parentanchor = top|right
                            visible = "[GreaterThanOrEqualTo_CFixedPoint(Character.MakeScope.Var(Scope.GetFlagName).GetValue,'(CFixedPoint)2')]"
                        }
                        # Background for each entry
                        icon = {
                            texture = "gfx/artifacts/artifacts_entry_bg.dds"
                            position = { 100 2 }
                            alwaystransparent = yes
                            layer = bottom
                        }
                    }
                    artifact_spacer_horizontal = {}
                    vbox = {
                        artifact_spacer_vertical = {}
                        layoutpolicy_horizontal = expanding
                        layoutpolicy_vertical = expanding
                        hbox = {
                            layoutpolicy_horizontal = expanding
                            textbox = {
                                font = StandardGameFont
                                fontcolor = { 1 1 1 1 }
                                fontsize = 16
                                text = GET_ARTIFACT_NAME_LOC
                                autoresize = no
                                layoutpolicy_horizontal = expanding
                                elide = right
                                minimumsize = { -1 16 }
                                align = left
                                block "artifact_name"
                                {}
                            }
                            block "equipped" {
                                textbox = {
                                    # Shows "Equipped" when an artifact is equipped. 
                                    font = StandardGameFont
                                    fontcolor = { 1 1 1 1 }
                                    fontsize = 16
                                    text = "Equipped"
                                    visible = "[Character.MakeScope.Var(Concatenate(Scope.GetFlagName,'_equipped')).IsSet]"
                                    autoresize = no
                                    layoutpolicy_horizontal = expanding
                                    elide = right
                                    minimumsize = { -1 16 }
                                    align = right
                                }
                            
                                artifact_spacer_horizontal = {}
                                icon = {
                                    #Shows a checkmark when an item is equipped.
                                    texture = "gfx/artifacts/icon_check.dds"
                                    size = { 22 16 }
                                    visible = "[Character.MakeScope.Var(Concatenate(Scope.GetFlagName,'_equipped')).IsSet]"
                                }
                                artifact_spacer_horizontal = {}
                            }
                        }
                        artifact_spacer_vertical = {}
                        textbox = {
                            font = StandardGameFont
                            fontcolor = { 0.8 0.8 0.8 1 }
                            fontsize = 12
                            # Shows the modifier on the stat sheet for the artifact button.
                            text = "[GetModifier(Concatenate(Scope.GetFlagName,'_modifier')).GetDesc]"
                            autoresize = no
                            layoutpolicy_horizontal = expanding
                            layoutpolicy_vertical = expanding
                            elide = right
                            multiline = yes
                            align = top|left
                            block "artifact_description"
                            {}
                        }
                    }
                }
            }
        }
    }
    type artifact_indices_gui = dynamicgridbox {# Create interaction effects for a list like in the main artifact window
        ignoreinvisible = yes
        maxhorizontalslots = 1
        block "maxverticalslots"{
            maxverticalslots = 100
        }
        layoutpolicy_vertical = expanding
        position = {0 0}
        name = "artifact_indices"
        #indices = List of ALL indices
        #small_indices = List of indices < 100
        #very_small_indices = List of indices < 10
        block "indexdatamodel" {
            datamodel = "[GetDummyMale.MakeScope.GetList('small_indices')]"
        }
        item = {
            button_standard = { 
                block "size" {
                    size = { 500 101 }
                }
                block "itemcontext" {
                    datacontext = "[GetScriptedGui('select_artifact_by_province')]"
                }
                block "onclick"
                {
                    onclick = "[GetVariableSystem.Toggle(Scope.GetProvince.GetName)]"
                    onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(Character.MakeScope).AddScope('prov', Scope.GetProvince.MakeScope).End)]"
                }
                block "visibility" {
                    visible = "[ScriptedGui.IsShown(GuiScope.SetRoot(Character.MakeScope).AddScope('prov', Scope.GetProvince.MakeScope).End)]"
                }
                block "artifact_extra"
                {
                    alpha = 1
                }
            }
        }
    }
    type artifact_filter_options_visual = dynamicgridbox { # Create visuals for a list like the filters
        ignoreinvisible = yes
        flipdirection = yes
        maxhorizontalslots = 12
        maxverticalslots = 2
        name = "artifact_types"
        block "datamodel" {
        datamodel = "[Character.MakeScope.GetList('artifact_types')]"
        }
        item = {
            widget = { 
                block "size"{
                    size = { 35 35 }
                }
                block "tooltip"{
                    tooltip = "[SelectLocalization('(bool)yes', Concatenate('artifact_type_',Scope.GetFlagName),'Error loading tooltip')]"
                }
                background = {
                    texture = "gfx/interface/buttons/button_round_bg.dds"
                    using = Color_Button_Background
        
                    block "button_bg_color" {}
        
                    modify_texture = {
                        texture = "gfx/interface/component_overlay/overlay_texture.dds"
                        blend_mode = overlay
                    }
                }
                text_single = {
                    text = artifact_type_filter
                    
                    size = { 50 50 }
                    parentanchor = center
                }
                block "artifact_extra"
                {
                    alpha = 1
                }
            }
        }
    }
    
    type artifact_filter_options_indices = dynamicgridbox {# Create interaction effects for a list like the filters
        ignoreinvisible = yes
        flipdirection = yes
        maxhorizontalslots = 12
        maxverticalslots = 2
        name = "artifact_types"
        datamodel = "[GetDummyMale.MakeScope.GetList('very_small_indices')]"
        item = {
            button_round = { 
                block "size"{
                    size = { 35 35 }
                }
                block "down" {
                    onclick = "[GetVariableSystem.Clear('ArtifactSlotFilterIndex')]"
                    onclick = "[GetVariableSystem.Set('ArtifactTypeFilterIndex', Scope.GetProvince.GetName)]"
                    down = "[GetVariableSystem.HasValue('ArtifactTypeFilterIndex', Scope.GetProvince.GetName)]"
                }
                block "itemcontext" {
                    datacontext = "[GetScriptedGui('select_artifact_filter_type_by_province')]"
                }
                block "onclick"
                {
                    onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(Character.MakeScope).AddScope('prov', Scope.GetProvince.MakeScope).End)]"
                }
                block "visibility" {
                    visible = "[ScriptedGui.IsShown(GuiScope.SetRoot(Character.MakeScope).AddScope('prov', Scope.GetProvince.MakeScope).End)]"
                }
                block "artifact_extra"
                {
                    alpha = 1
                }
            }
        }
    }
}