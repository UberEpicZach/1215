# This file exists to manage the indexing system, which is based on province IDs.
# This is necessary because GUI files cannot send FLAG or NUM scopes to Scripted GUIs.
# By passing provinces, we can convert those to index numbers and then manage the artifacts based on their positioning in various artifact lists.

# Basic index manipulation system is outdated with the new "GUI Modding Framework". Instead, every index is maintained by global_var:dummy_male (GetDummyMale) and it never needs updating.

# Select artifact in GUI based on position in list
select_artifact_of_index = { #N
	if = {
		limit = {exists = var:artifact_filter}
		ordered_in_list = {
			variable = artifact_list_filtered
			position = $N$
			prev = {set_variable = {name = artifact_selection value = prev}}
		}
	}
	else = {
		ordered_in_list = {
			variable = artifact_list
			position = $N$
			prev = {set_variable = {name = artifact_selection value = prev}}
		}
	}
	for_all_artifacts_no_arguments = {APPLY = properly_select_selected_artifact}
}
properly_select_selected_artifact = { # ARTIFACT
	if = {
		limit = {
			var:artifact_selection = flag:$ARTIFACT$
		}
		select_artifact = {ARTIFACT = $ARTIFACT$}
	}
}
# Toggle gift artifact in GUI based on position in list
toggle_artifact_of_index_for_gifting = { #N
	ordered_in_list = {
		variable = artifact_list
		position = $N$
		prev = {
			if = {
				limit = {
					is_target_in_variable_list = {name = artifact_gift_selection target = prev}
				}
				remove_list_variable = {name = artifact_gift_selection target = prev}
				for_all_artifacts_no_arguments = {APPLY = unmark_prev_artifact_gift_selection}
			}
			else = {
				add_to_variable_list = {name = artifact_gift_selection target = prev}
				for_all_artifacts_no_arguments = {APPLY = mark_prev_artifact_gift_selection}
			}
		}
	}
}
mark_prev_artifact_gift_selection = {
	if = {
		limit = {prev = flag:$ARTIFACT$}
		set_variable = $ARTIFACT$_selected_give
	}
}
unmark_prev_artifact_gift_selection = {
	if = {
		limit = {prev = flag:$ARTIFACT$}
		remove_variable = $ARTIFACT$_selected_give
	}
}
transfer_artifact_gift_selection = {# A B
	for_all_artifacts_nofix = {
		APPLY = transfer_artifact_if_in_gift_selection
		A = $A$
		B = $B$
	}
}
transfer_artifact_if_in_gift_selection = { # ARTIFACT A B
	if = {
		limit = {
			is_target_in_variable_list = {name = artifact_gift_selection target = flag:$ARTIFACT$}
		}
		transfer_artifact = {ARTIFACT = $ARTIFACT$ A = $A$ B = $B$}
		remove_list_variable = {name = artifact_gift_selection target = flag:$ARTIFACT$}
		remove_variable = $ARTIFACT$_selected_give
	}
}
# FILTER MECHANICS
refresh_filter = {
	if = {
		limit = {NOT = {exists = var:artifact_filter}}
		set_variable = {name = artifact_filter value = flag:all}
	}
	clear_variable_list = artifact_list_filtered
	for_all_subtypes_and_all = {APPLY = filter_artifact_list_conditionally}
}
filter_artifact_list_of_type = { # TYPE
	clear_variable_list = artifact_list_filtered
	every_in_list = {
		variable = artifact_list
		limit = {
			is_target_in_global_variable_list = {
				name = global_artifact_list_$TYPE$ 
				target = this
			}
		}
		prev = {add_to_variable_list = {name = artifact_list_filtered target = prev}}
	}
}
filter_artifact_list_conditionally = { # TYPE
	if = {
		limit = {
			exists = var:artifact_filter
			var:artifact_filter = flag:$TYPE$
		}
		filter_artifact_list_of_type = {TYPE = $TYPE$}
	}
}
add_type_of_artifact = {# ARTIFACT
	add_type_of_flag_artifact = {ARTIFACT = flag:$ARTIFACT$}
}
add_type_of_flag_artifact = {#flag:ARTIFACT
	$ARTIFACT$ = {# This ordering is actually important, so long as the slots list is initialized to include "All"
		for_all_non_slots = {APPLY = add_type_of_scoped_artifact}
		for_all_slots = {APPLY = add_slot_of_scoped_artifact}
	}
}

# SLOT FILTERS
set_artifact_filter_slot_of_index = { #N
	ordered_in_list = {
		variable = artifact_slots
		position = $N$
		prev = {set_variable = {name = artifact_filter value = prev}}
	}
}
add_slot_of_scoped_artifact = {# TYPE
	if = {
		limit = {
			is_target_in_global_variable_list = {
				name = global_artifact_list_$TYPE$
				target = this
			}
		}
		prev = {
			add_to_variable_list = {
				name = artifact_slots
				target = flag:$TYPE$
			}
		}
	}
	#prev = {add_artifact_index_province = {N = num_artifact_types }}
}
### SUBTYPE FILTERS

set_artifact_filter_type_of_index = { #N
	ordered_in_list = {
		variable = artifact_types
		position = $N$
		prev = {set_variable = {name = artifact_filter value = prev}}
	}
}
add_type_of_scoped_artifact = {# TYPE
	if = {
		limit = {
			is_target_in_global_variable_list = {
				name = global_artifact_list_$TYPE$
				target = this
			}
		}
		prev = {
			add_to_variable_list = {
				name = artifact_types
				target = flag:$TYPE$
			}
		}
	}
	#prev = {add_artifact_index_province = {N = num_artifact_slots}}
}
# SORTING
# DOES NOT WORK AFTER REFRESHING; ORDERING IS RESET UPON REFRESH
sort_artifact_to_end_of_list = { # N
	if = {
		limit = {exists = var:artifact_filter}
		ordered_in_list = {
			variable = artifact_list_filtered
			position = $N$
			prev = {
				remove_list_variable = {
					name = artifact_list
					target = prev
				}
				add_to_variable_list = {
					name = artifact_list
					target = prev
				}
				remove_list_variable = {
					name = artifact_list_filtered
					target = prev
				}
				add_to_variable_list = {
					name = artifact_list_filtered
					target = prev
				}
			}
		}
	}
	else = {
		ordered_in_list = {
			variable = artifact_list
			position = $N$
			prev = {
				remove_list_variable = {
					name = artifact_list
					target = prev
				}
				add_to_variable_list = {
					name = artifact_list
					target = prev
				}
			}
		}
	}
	for_all_artifacts_no_arguments = {APPLY = properly_select_selected_artifact}
}

### DEBUG
add_province_gold = { # N
	ordered_province = {
		position = $N$
		save_scope_as = test
		if = {
			limit = {
				has_variable = index
			}
			root = {add_gold = prev.var:index}
		}
	}
}

# Old iterative system, no longer used.
initialize_artifact_index_province = {
	ordered_province = {
		position = $N$
		set_variable = {name = index value = $N$}
	}
}
alt_initialize_province_indices = { # yes
	apply_for_N_indices = {APPLY = initialize_artifact_index_province N = 1000} 
	# Overflow protection incurred after 1000 iterations of a while loop
	# If your character has over 1000 artifacts then you have other problems.
}
apply_for_N_indices = { # APPLY = function (which takes an N), N = num
	$APPLY$ = {N = 0}
	set_local_variable = {name = idd value = 0}
	while = {
		limit = {
			local_var:idd < $N$
		}
		change_local_variable = {
			name = idd
			add = 1
		}
		$APPLY$ = {N = local_var:idd}
	}
	remove_variable = idd
}
