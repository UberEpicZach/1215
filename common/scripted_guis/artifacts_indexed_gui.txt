select_artifact_by_province = {
	scope = character
	saved_scopes = {
		prov
	}
	effect = {
		root = {select_artifact_of_index = {N = scope:prov.index}}
	}
	is_shown = {
		has_variable_list = artifact_list_filtered
		variable_list_size = {
			name = artifact_list_filtered
			value > scope:prov.var:index
		}
		#OR = {
		#	AND = {
		#		exists = var:artifact_filter
		#		has_variable_list = artifact_list_filtered
		#		variable_list_size = {
		#			name = artifact_list_filtered
		#			value > scope:prov.index
		#		}
		#	}
		#	NOT = {
		#		exists = var:artifact_filter
		#		has_variable_list = artifact_list_filtered
		#	}
		#	AND = {
		#		exists = var:artifact_filter
		#		var:artifact_filter = flag:all
		#	}
		#}
	}
}
toggle_gift_artifact_by_province = {
	scope = character
	saved_scopes = {
		prov
	}
	effect = {
		root = {toggle_artifact_of_index_for_gifting = {N = scope:prov.index}}
	}
	is_shown = {
		has_variable_list = artifact_list
		variable_list_size = {
			name = artifact_list
			value > scope:prov.var:index
		}
	}
}

select_artifact_filter_slot_by_province = {
	scope = character
	saved_scopes = {
		prov
	}
	effect = {
		set_artifact_filter_slot_of_index = {N = scope:prov.index}
		refresh_filter = yes
	}
	is_shown = {
		has_variable_list = artifact_slots
		variable_list_size = {
			name = artifact_slots
			value > scope:prov.var:index
		}
	}
}
select_artifact_filter_type_by_province = {
	scope = character
	saved_scopes = {
		prov
	}
	effect = {
		set_artifact_filter_type_of_index = {N = scope:prov.index}
		refresh_filter = yes
	}
	is_shown = {
		has_variable_list = artifact_types
		variable_list_size = {
			name = artifact_types
			value > scope:prov.index
		}
	}
}
# Demonstrative example: IS shown if the filtered artifact in this position is a Shard type artifact.
example_artifact_gui = {
	scope = character
	saved_scopes = {
		prov
	}
	is_shown = {
		fetch_artifact_list_filtered_entry = {N = scope:prov.index} # This sets the temporary scope scope:artifact from the filtered list
		is_target_in_global_variable_list = {
			name = global_artifact_list_shard
			target = scope:artifact
		}
	}
	is_valid = { # Returns true if the flag:artifact_shardblade is in this index's position in specifically the list "artifact_list".
		has_shifted_list_position = {LIST = artifact_list TARGET = flag:artifact_shardblade N = scope:prov.shifted_index} # Uses shifted index for efficiency.
	}
}